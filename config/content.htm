<h1><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">進度表</span></span></span></span></span></span></strong></h1>
<table style="margin-left: auto; margin-right: auto;" width="431">
<tbody>
<tr style="height: 15px;">
<td style="width: 136.8px; text-align: center; height: 15px;"><span style="background-color: #ccffff;">項目</span></td>
<td style="width: 136.8px; text-align: center; height: 15px;"><span style="background-color: #ccffff;">完成</span></td>
</tr>
<tr style="height: 14px;">
<td style="width: 136.8px; text-align: center; height: 14px;"><span style="background-color: #ccffff;">hw1</span></td>
<td style="width: 136.8px; height: 14px; text-align: center;"><span style="background-color: #ccffff;">90%</span></td>
</tr>
<tr style="height: 14px;">
<td style="width: 136.8px; text-align: center; height: 14px;"><span style="background-color: #ccffff;">hw2</span></td>
<td style="width: 136.8px; height: 14px; text-align: center;"><span style="background-color: #ccffff;">33%</span></td>
</tr>
<tr style="height: 14.075px;">
<td style="width: 136.8px; text-align: center; height: 14.075px;"><span style="background-color: #ccffff;">hw3</span></td>
<td style="width: 136.8px; height: 14.075px; text-align: center;"><span style="background-color: #ccffff;">60%</span></td>
</tr>
<tr style="height: 15px;">
<td style="width: 136.8px; text-align: center; height: 15px;"><span style="background-color: #ccffff;">團隊網站架設上傳</span></td>
<td style="width: 136.8px; height: 15px; text-align: center;"><span style="background-color: #ccffff;">33%</span></td>
</tr>
</tbody>
</table>
<p><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"> </span></span></span></span></span></span></strong></p>
<h1><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">hoomwork(1)</span></span></span></span></span></span></strong></h1>
<p><span style="background-color: #ff99cc;"><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">點到這個欄位的話就請你不要看他</span></span></span></span></span></span></strong></span></p>
<p><span style="background-color: #ff99cc;"><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"></span></span></span></span></span></span></strong></span></p>
<p><span style="background-color: #ff99cc;"><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"></span></span></span></span></span></span></strong></span></p>
<p><span style="background-color: #ff99cc;"><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">我討厭程式設計</span></span></span></span></span></span></strong></span></p>
<p><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"></span></span></span></span></span></span></strong></p>
<h2><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">PCH5 主板、</span></span></span></span></span></span>擴展總線和處理器</strong></h2>
<h3><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">主板和組件</span></span></span></span></span></span></h3>
<p><span style="vertical-align: inherit; background-color: #ccffff;">主板和組件</span></p>
<p id="N10686" lang=""><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">在本課程中，我們將介紹主板的用途和功能。我們介紹了</span></span><strong><span style="color: #ff0000;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">中央處理器（CPU）</span></span></span></strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">和</span></span><strong><span style="color: #ff0000;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">為CPU提供專門功能的各種技術</span></span></span></strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">，例如虛擬化，超線程和多核處理器。最後，我們將</span></span><strong><span style="color: #ff0000;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">介紹可用的各種CPU冷卻方法</span></span></span></strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">，例如主動和被動散熱器以及液體冷卻。</span></span></span></p>
<p id="N10689" lang=""><span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">主板是計算機的基礎。</span></span></span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">主板就像一個街區，公交車就像街道。</span></span></span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">這些組件就像城市中的建築物，因此，如果您要從一棟建築物變成另一棟建築物（或者在我們的情況下，如果我們我們希望信息從一個組件流向另一組件），則它必須穿越公交車（街道））。</span></span></span><span><strong><span style="color: #ff0000;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">總線將主板的各個組件物理連接在一起</span></span></span><span style="color: #ff0000;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">，使信息可以流入和通過多個計算機組件</span></span></span></strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">。</span></span></span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">主板有各種形狀，大小和佈局。</span></span></span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">主板的特定形狀，大小和佈局稱為其外形尺寸。</span></span></span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">主板是最重要的計算機組件之一，因為其他所有組件都插入主板中，</span></span></span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">可以插入專用插槽（例如CPU），擴展槽（用於各種擴展卡）或連接器（例如SATA存儲設備和音頻輸入/輸出）中。</span></span></span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">主板確實是計算機中所有組件的主要集合點</span></span></span></span></p>
<p>                                               <img alt="主板的照片。" height="153" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image1.png" width="187"/></p>
<p style="text-align: center;"> <img height="458" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image2.jpeg" width="543"/></p>
<table style="width: 620px;">
<tbody>
<tr style="height: 18px;">
<td style="width: 94.6667px; height: 18px;">
<table align="center" cellspacing="0" class="wbtable" lang="" style="width: 94.8571px;">
<tbody>
<tr class="e" style="height: 14.7857px;">
<td lang="" style="width: 88.8571px; height: 14.7857px;"><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">組件名稱</span></span></strong></td>
</tr>
</tbody>
</table>
</td>
<td style="width: 532.667px; height: 18px;">
<table align="center" cellspacing="0" class="wbtable" height="19" lang="" width="533">
<tbody>
<tr class="e">
<td lang="" style="text-align: left; width: 527.429px;"><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">功能</span></span></span></span></span></span></strong></td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr style="height: 14px;">
<td style="width: 94.6667px; height: 14px;"><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">PCI擴展插槽</span></span></span></td>
<td style="width: 532.667px; height: 14px;"><span>這些使我們<span style="color: #ff0000;">能夠為計算機添加功能</span>，<span style="color: #ff0000;">例如額外的USB端口，新的聲卡，調製解調器或網卡</span>等。</span><span>這是一個通用卡插槽，所有製造商都可以在使用通用規範構建卡時使用。</span></td>
</tr>
<tr style="height: 43px;">
<td style="width: 94.6667px; height: 43px;"><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">PCIe x1（PCI Express大小1）插槽</span></span></span></span></span></span></span></td>
<td style="width: 532.667px; height: 43px;"><span>該特定的主板具有三個插槽，根據其特定的外形尺寸，不同的主板對此有所不同。</span><span>這些是較新的插槽，比舊的PCI插槽快得多。</span><span>PCIe代表PCI Express，x1表示存在一個專用的串行數據連接（通道）。</span><span>PCIe具有多種尺寸，例如x1，x4，x8和x16。</span></td>
</tr>
<tr style="height: 43px;">
<td style="width: 94.6667px; height: 43px;"><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">PCIe x16（PCI Express尺寸16）插槽</span></span></span></span></span></span></span></td>
<td style="width: 532.667px; height: 43px;"><span>這些是較新的插槽，比舊的PCI插槽快得多。</span><span>PCIe代表PCI Express，x16表示有16個串行通道。</span><span>PCIe具有多種尺寸，例如x1，x4，x8和x16。</span></td>
</tr>
<tr style="height: 14px;">
<td style="width: 94.6667px; height: 14px;"><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">後置輸入/輸出功率</span></span></span></td>
<td style="width: 532.667px; height: 14px;"><span>每個主板都可以<span style="color: #ff0000;">提供專用的功能</span>，例<span style="color: #ff0000;">如網卡，聲卡，視頻卡以及各種輸入/輸出端口</span>，這些功能都“聚集”在板上。</span><span>這些組件已焊接到主板上，因此無法更改。</span></td>
</tr>
<tr style="height: 14px;">
<td style="width: 94.6667px; height: 14px;"><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">CPU插槽</span></span></span></span></span></span></span></td>
<td style="width: 532.667px; height: 14px;"><span>CPU插槽是<span style="color: #ff0000;">插入中央處理器</span>（計算機的大腦）<span style="color: #ff0000;">的位置</span>。</span></td>
</tr>
<tr style="height: 14px;">
<td style="width: 94.6667px; height: 14px;"><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">內存插槽</span></span></span></td>
<td style="width: 532.667px; height: 14px;"><span>這些插槽是在其中<span style="color: #ff0000;">插入額外的隨機存取存儲器</span>（RAM）以便為計算機提供容量的位置。</span></td>
</tr>
<tr style="height: 14px;">
<td style="width: 94.6667px; height: 14px;"><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">24針主電源連接器</span></span></span></td>
<td style="width: 532.667px; height: 14px;"><span>這個24針主電源連接器<span style="color: #ff0000;">為整個主板供電</span>。</span></td>
</tr>
</tbody>
</table>
<p></p>
<p></p>
<h3><strong>擴展插槽</strong></h3>
<p><span style="background-color: #ccffff;"><strong>擴展插槽</strong></span></p>
<ul lang="">
<li lang="">
<p id="N10688" lang=""><span>擴展插槽可<span style="color: #ff0000;">提供計算機系統的其他功能</span>。擴展卡已插入擴展槽。<span style="color: #ff0000;">主板上有許多不同類型的擴展插槽</span>。這些類型的插槽中的每一種的功能將在以後的模塊中進行更詳細的討論。以下是最常見的擴展插槽類型的簡要概述。</span></p>
</li>
<li lang=""><span><span>PCI —傳統的外圍組件互連插槽，通常使用其縮寫詞來指代。</span></span></li>
<li lang=""><span><span>PCI-X — PCI插槽的更快的64位版本，以133 MHz的總線速度運行。</span></span></li>
<li lang=""><span><span>AGP —專用於與共享PCI總線分開的專用圖形通道（總線）。</span><span>這使得3D遊戲設計，硬件加速和視頻播放方面有了進步。</span></span></li>
<li lang=""><span><span>PCIe — PCI Express的速度超過了AGP的速度，並且PCIe為所有設備提供了單個插槽類型。</span></span></li>
<li lang=""><span><span>AMR —音頻調製解調器轉接卡是一種特殊類型的卡，用於將其他卡裝入緊湊的空間。</span></span></li>
<li lang=""><span>CNR —通信網絡轉接卡取代了AMR，並在轉接卡上支持六通道數字音頻，網絡功能和其他高質量的集成音頻支持。</span></li>
</ul>
<p></p>
<h3>芯片組</h3>
<p>芯片組確定系統可以使用的CPU，系統提供端口以及主板中包含的擴展插槽的類型。<span>主板的尺寸決定了特定的尺寸，形狀和佈局，而芯片組則決定了將哪些技術集成到主板本身中。</span><span>每個芯<span style="color: #ff0000;">片組都定義了內存控制器，並指定了主板可以使用哪種RAM</span>。</span><span>這包括要使用的RAM的類型（DDR，DDR2，DDR3等）和RAM的速度（10600、1333 MHz等）。</span><span><span style="color: #ff0000;">主板在技術上分為“北橋”和“南橋”</span>，將在下一節中進一步討論。</span><span>該芯片組由製造商設計，如果不更換整個主板，最終用戶將無法升級或更改。</span><span>因此，在購買滿足您需求的主板和芯片組之前，請務必謹慎選擇。</span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">                                       <img alt="具有確定的北橋和南橋的主板。" class="popimg" height="250" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image5.png" title="具有確定的北橋和南橋的主板。" width="248"/></span></span></p>
<p><span style="background-color: #ccffff;">北橋</span></p>
<div class="section" id="N106BB">
<div class="sectionContain">
<p id="N106C2" lang=""><span>北橋有幾個名字。第一個也是<span style="color: #ff0000;">最常見的是內存控制器中樞（MCH）</span>，但也可以稱為Intel主板上<span style="color: #ff0000;">具有集成顯卡的圖形內存控制器中樞（GMCH）</span>。北橋用作CPU和內存庫（RAM），PCIe x16，AGP圖形擴展插槽以及其他高速組件之間的連接。從本質上講，CPU的運行速度非常快（例如3 GHz或更高的速度），並且計算機周圍的各種組件無法以如此快的速度運行<span style="color: #ff0000;"><span style="color: #000000;">。</span>北橋充當緩衝區，以保持高速設備向CPU提供信息。雖然內存可以在1至2 GHz範圍內運行，但它與CPU之間仍然存在延遲。</span></span></p>
<span style="background-color: #ccffff;">南橋</span></div>
</div>
<div class="section" id="N106C7">
<div class="sectionContain">
<p id="N106CE" lang=""><span><span><span style="color: #ff0000;">南橋被稱為輸入/輸出控制器集線器（ICH）</span>。</span><span>南橋用作CPU和<span style="color: #ff0000;">計算機低速組件之間的連接</span>。</span><span>例如，與CPU相比，硬盤以非常慢的速度運行，但是來自用戶（來自鍵盤和鼠標）的輸入發生的速度甚至比硬盤慢。</span><span>ICH整合了大容量存儲設備，DVD / CD驅動器，硬盤驅動器，軟盤驅動器，USB端口，PCI擴展插槽，CMOS和端口群集的輸入/輸出的輸入，然後將該信息從南橋傳遞到北橋，然後到CPU進行處理。</span></span></p>
</div>
</div>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">                                   <img class="popimg" height="388" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image20.png" width="254"/></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"></span></span></p>
<h3><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">連結器</span></span></strong></h3>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span>主板還包含用於為計算機系統提供其他配置選項的引腳。</span><span>這些針腳可以用跨接器設備覆蓋，該<span style="color: #ff0000;">連結器是一種塑料，內部具有金屬，可以在一組針腳之間建立電連接</span>。</span><span>跳線允許在主板上啟用或禁用特定功能。</span></span></span></p>
<p><span style="background-color: #ccffff;">風扇連結器</span></p>
<p><span>每個主板都有幾個風扇連接器，特別是CPU風扇和機箱風扇。</span><span>這些連接器從主板為風扇提供電源（最終從電源到主板的主電源連接器，再向風扇本身供電）。</span><span>一些較新的主板可以提供PC運行狀況，例如風扇速度，風扇功率，板溫度和其他統計信息。</span><span>大多數機箱風扇連接器只有三個腳，但是<span style="color: #ff0000;">CPU風扇連接器可以具有四個腳，其中一個引腳專用於速度控制</span>。</span><span>然後，可以根據<span style="color: #ff0000;">CPU和主板的溫度來增加或減少風扇速度。</span></span><span><span style="color: #ff0000;">隨著溫度升高，將發送信號以提高速度控制，從而降低CPU和主板的溫度</span>。</span></p>
<p><span style="background-color: #ccffff;">音頻連結器</span></p>
<p><span>主板還包含音頻設備的接口，例如<span style="color: #ff0000;">輔助輸入或CD播放</span>。</span><span>某些機箱的正面配有耳機和麥克風的音頻插孔；</span><span>這些功能需要從機箱正面到主板上的音頻連接器的電纜。</span><span>主板上的另一個連接器可能是Sony / Philips數字交換格式（SPDIF），該<span style="color: #ff0000;">連接器從主板連接到SPDIF光學連接器（稱為接頭）</span>。</span><span>這些各種音頻連接器在主板上看起來相同，通常僅通過主板上端口的標記來區分。</span><span>它們通常位於主板的邊緣之一上。</span></p>
<p><span style="background-color: #ccffff;">前面板連結器</span></p>
<p><span><span>前面板連接器以及各種彩色電纜。</span><span>連接器使母板可以從電源開關，電源LED指示燈，硬盤驅動器活動指示燈，重置按鈕和機箱揚聲器（如果已安裝）發送/接收信息。</span><span>連接器通常分組在主板的前邊緣，並且往往很小且難以安裝。</span><span>通常，技術人員將不得不使用鑷子將其連接到插頭。</span><span>在計算機內進行其他工作時，很容易意外拔下這些接口，因此，最好在更換主機蓋之前重新檢查這些接口。</span><span>例如，<span style="color: #ff0000;">如果電腦無法開機，則可能不是電源問題，</span></span><span><span style="color: #ff0000;">可能只是“電源開關”前面板連接器已拔出</span>。</span><span>如<span style="color: #ff0000;"><span style="color: #000000;">果</span>電源開關未完全插入主板，則電腦將無法打開</span>。</span></span></p>
<h3><span><span>處理器歷史</span></span></h3>
<p id="N106B5" lang=""><span>第一批微處理器於1970年代製造。這些微處理器基於NMOS（n型金屬氧化物半導體）邏輯和晶體管構建。早期，四位處理器（例如Intel 4004）很常見。英特爾4004具有2300個晶體管。它每秒執行60,000次操作，尋址640字節的內存，並以740 kHz的速度運行。英特爾4004的價格約為200美元。十年後，諸如摩托羅拉6502之類的八位處理器取代了四位芯片。摩托羅拉6502是8毫米製程技術芯片，面積為4毫米見方。到1970年代末，出現了16位處理器。</span></p>
<p id="N106B8" lang=""><span><span>在1980年代，新設計中普遍使用16位和32位微處理器，而CMOS（互補金屬氧化物半導體）技術取代了NMOS。</span><span>在過去的十年中，晶體管的數量急劇增加。</span><span>1980年代的家用計算機主要使用1970年代引入的處理器。</span><span>1975年首次發布的Motorola 6502和Zilog Z80（1976）的版本是許多家用計算機的核心，例如Commodore 64和ZX Spectrum。</span><span>甚至第一代IBM PC都使用了1970年代的處理器：Intel8088。直到Intel的80286（在IBM PC AT中）和後來的80386，1980年代的計算機才使用1980年代設計的處理器。</span><span>這些近十年來的處理器提供了更高的時鐘速度和32位字長，以及新的工作模式，例如保護模式，</span><span>早期芯片中沒有的功能。</span><span>具體來說，英特爾80386是32位芯片。</span><span>它擁有超過275,000個晶體管，每秒可執行超過500萬條指令。</span><span>80386的價格約為299美元。</span><span>至關重要的是，在這些更高級的芯片中，從Microsoft Windows 2.0開始，保護模式允許使用虛擬內存，並將圖形用戶界面帶入商用計算機。</span></span></p>
<p id="N106BB" lang=""><span><span><span style="color: #ff0000;">32位微處理器在1990年代主導了消費市場</span>。</span><span>在1990年至1999年之間，處理器時鐘速度提高了十倍以上，並且在該十年後期開始出現64位處理器。</span><span>在1990年代，微處理器不再為處理器和RAM使用相同的時鐘速度。</span><span>這項技術可以提高處理器速度。</span><span>1993年，英特爾發布了奔騰處理器。</span><span>奔騰芯片是60 MHz處理器。</span><span>它裝有310萬個晶體管，售價約為875美元。</span></span></p>
<p id="N106BE" lang=""><span><span><span style="color: #ff0000;">在2000年代，64位處理器成為主流</span>。</span><span>由於冷卻技術達到頂峰，微處理器時鐘速度達到了上限。</span><span>散發處理器熱量的能力已達到極限。</span><span>製造商沒有採用昂貴且不切實際的冷卻系統，而是尋求其他方法來使用多核處理器技術來提高處理器性能。</span><span>超頻誕生於1990年代，但在2000年代就已誕生。</span><span>隨著多核技術的引入，處理器成本開始急劇下降。</span></span></p>
<p id="N106C1" lang=""><span><span>設計<span style="color: #ff0000;">用於超頻處理器的現成的冷卻系統變得越來越普遍，而設計用於遊戲的PC的概念也越來越普遍</span>。</span><span>在<span style="color: #ff0000;">過去的十年中，晶體管的數量增加了大約一個量級</span>，這一趨勢延續了過去的幾十年。</span><span><span style="color: #ff0000;">處理器尺寸從180 nm減少到45 nm</span>約四倍。</span></span><a href="http://www.computerhope.com/comp/amd.htm" id="_i_0" lang="" target="_blank"><span><span>AMD</span></span></a><span><span>在2007年</span><span>發布了Athlon X2處理器系列。</span><span>AMD Athlon X2 Brisbane系列以1.9至2.6 GHz的速度進行處理，並包含512 KB L2緩存。</span><span>2012年，</span></span><a href="http://www.computerhope.com/comp/amd.htm" id="_i_1" lang="" target="_blank"><span><span>AMD</span></span></a><span><span>發布了A10-5700台式機處理器。</span><span>它包括一個4M L2高速緩存，並以3.4 GHz或Turbo模式下的4.0 GHz的速度進行處理。</span><span>AMD的A10-5800K與A10-5700同時發布，具有相同的緩存，但是在Turbo模式下提供了3.8 GHz或4.2 GHz的處理速度。</span><span>在2010年代，處理器通常容納2.5至40億個晶體管。</span></span></p>
<p id="N106CE" lang=""><span><span>本節的內容摘自</span></span><a href="https://en.wikipedia.org/wiki/Microprocessor_chronology" id="_i_2" lang="" target="_blank"><span><span>Wikipedia</span></span></a><span><span>。</span></span></p>
<h3><span><span>虛擬化</span></span></h3>
<p><span style="background-color: #ccffff;">虛擬化</span></p>
<p lang=""><span>虛擬化是CPU的絕佳補充。虛擬化正在席捲計算機世界，在此過程中為我們<span style="color: #ff0000;">節省了大量資金。過去，如果要運行多個操作系統</span>，則必須有多台計算機，但現在不再需要。使<span style="color: #ff0000;">用硬件輔助虛擬化，我們可以使主機程序或主機操作系統</span>（例如一台物理計算機）<span style="color: #ff0000;">在主機OS的桌面內運行一個或多個來賓操作系統</span>（例如虛擬計算機）。在下面的圖像中，您可以在程序窗口中查看運行Windows的Macintosh OSX系統，並在另一個程序窗口中查看Ubuntu Linux。在此示例中，我們在同一台計算機上同時使用三種不同的操作系統。有許多程序可以使這種情況發生，</span><span>但是，為什麼我們要運行多個系統？好吧，如果您在一家僅使用為Windows構建的自定義程序但擁有Macintosh並需要在家運行該程序的公司工作，該怎麼辦？在過去，您只需要購買一台PC即可運行該程序。現在，您只需在Macintosh中加載Virtual Windows 7計算機並運行該程序即可。在服務器方面，服務器要花費數万美元。如果要運行小型Web服務器，則可能不需要這種類型的處理。因此，託管公司可以使用單個服務器，並在單個服務器上提供數百個虛擬服務器，而您每月只需支付幾美元的訪問費用。</span></p>
<p lang="" style="text-align: center;"><span><img alt="" height="248" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image13.png" width="397"/></span></p>
<p id="N1069A" lang=""><span><span>虛擬化正在繼續擴展，並將在可預見的將來繼續擴展。</span><span>許多公司和個人正在遷移到存在虛擬機而無需內部部署硬件的雲中。</span><span>在雲計算中，從雲計算公司作為服務購買了運行多個操作系統或軟件的基礎架構。</span></span></p>
<h3><span><span>集成處裡單元(GPU)</span></span></h3>
<p><span style="background-color: #ccffff;">集成處裡單元(GPU)</span></p>
<p><span><span><span>集成的圖形處理單元（GPU）<span style="color: #ff0000;">允許更快的視頻處理</span>，更輕鬆的內存訪問以及總體上較低的構建系統成本。</span><span>這個想法是，圖形不是由可能花費數百美元的專用圖形卡，而是<span style="color: #ff0000;">由CPU內部的專用圖形協處理器（如下圖所示，底部的較小芯片）處理</span>。</span><span>這些功能非常適合非3D用途，例如上網，辦公產品，DVD和視頻播放或低端遊戲。</span><span>但是，如果將系統用於視頻/圖形製作，計算機輔助設計（CAD）或遊戲，則通常需要使用母板上的PCIe x16插槽進行連接的獨立圖形卡。</span></span></span></p>
<p style="text-align: center;"><span><span><span><img alt="" height="190" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image14.png" width="189"/></span></span></span></p>
<p style="text-align: center;"><span><span><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/mp-FuhLs0BQ" width="560"></iframe></span></span></span></p>
<h3>CPU散熱</h3>
<p id="N10688" lang=""><span>我們需要討論在主板上<span style="color: #ff0000;">運行CPU時如何冷卻</span>。有幾種選擇。首先，有一個<span style="color: #ff0000; background-color: #ffff00;">無源散熱器，它是一個帶有散熱片的金屬設備</span>，可以將熱量從處理器散發出去。這是<span style="color: #ff0000;">冷卻CPU的非常安靜的方法</span>。但是，大<span style="color: #ff0000;">多數現代CPU產生的熱量過多，僅被動散熱片就無法發揮作用</span>。因此，<span style="color: #ff0000;">無源散熱器通常與有源散熱器配合</span>，在有源散熱器上，專用<span style="background-color: #ffff00; color: #ff0000;">風扇連接到金屬翅片散熱器的頂部，以更有效地吸收熱量</span>。</span></p>
<p id="N1068B" lang=""><span><span>在將散熱器連接到CPU之前，技術人員應首<span style="color: #ff0000;">先在CPU上塗導熱膏</span>，以<span style="color: #ff0000;">幫助熱量從CPU傳遞到金屬散熱器</span>。</span><span>因此，典型的安裝方法是將CPU放入處理器插槽中，對其進行導熱粘貼，然後將翅片散熱器連接到處理器頂部，最後將專用風扇連接到散熱器頂部。</span><span>導熱膏是使CPU絕緣的相變材料。</span><span>糊在室溫下為固體，但在較高溫度下變為液體。</span><span>當變成液體時，它消除了空氣，並提供了更好的絕緣性。</span></span></p>
<p id="N1068E" lang=""><span><span>另一種選擇是使用<span style="background-color: #ffff00; color: #ff0000;">液體冷卻系統</span>。</span><span>這是通過將特殊的液體溶液通過計算機泵送到熱交換器中來進行的，在熱交換器中，風扇在循環之前冷卻液體。</span><span>這些系統僅<span style="color: #ff0000;">用於非常高性能的系統和超頻系統，並且安裝和運行起來可能很複雜</span>。</span></span></p>
<p id="N10691" lang=""><span><span>在選擇冷卻系統時，噪音是一個大問題。</span><span>迄今為止，無源系統是最安靜的，而涉及風扇的有源系統是最嘈雜的。</span><span>與較大的CPU風扇相比，液冷系統通常使用較小的風扇來冷卻液體，因此，這是一種安靜的冷卻方法，但成本很高。</span></span></p>
<h2>CPH6 內存與BIOS</h2>
<p></p>
<h3>RAM基礎</h3>
<p><span style="background-color: #ccffff;">RAM基礎</span></p>
<p><span>為了使計算機正常運行，它需要一個臨時存儲空間來存儲從用戶或硬盤驅動器輸入到計算機中的數據，並將要寫入的數據存儲到更永久的存儲器中。</span><span>該臨時存儲稱為RAM或隨機存取存儲器。</span><span>RAM是CPU處理數據的工作區。</span><span>計算機啟動時，操作系統將啟動文件加載到RAM中。</span><span><span style="color: #ff0000;">RAM是動態的並且不斷變化</span>。</span><span>它的運行速度比硬盤驅動器快得多，並且可由計算機隨時更改。</span><span><span style="color: #ff0000;">RAM是易失性內存</span>，這意味著在斷電時它會丟失所有信息，因此只能用作臨時存儲。</span><span>該內存用於操作系統啟動文件（引導加載程序），程序，數據和磁盤緩存。</span></p>
<p style="text-align: center;"><span><img alt="" height="206" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image1.png" width="206"/></span></p>
<h3><span>內存模塊</span></h3>
<p><span style="background-color: #ccffff;">內存模塊</span></p>
<p><span><span>內存的用途之一是<span style="color: #ff0000;">充當磁盤緩存</span>。</span><span>就像我們在處理器中提到的緩存一樣，RAM充當了硬盤驅動器中最近使用和常用數據的更快的臨時存儲區域。</span><span>由於訪問RAM比查找硬盤驅動器扇區中的數據更快，因此RAM可提高計算機的性能。</span><span>僅當內存中有可用空間時才可以使用磁盤緩存。</span><span>但是，如果您沒有足夠的物理內存可用怎麼辦？</span><span>當物理內存不足時，計算機將創建虛擬內存。</span><span>虛擬內存有時也稱為“頁面文件”或“交換文件”。</span><span>虛擬內存是RAM的慢速替代品，因為它是在硬盤驅動器上創建的臨時文件，並模擬物理RAM。</span><span>本質上，</span><span>磁盤緩存使RAM可以充當極快的硬盤驅動器，而虛擬內存由硬盤驅動器上的文件組成，它們的運行速度非常慢。</span><span><span style="color: #ff0000;">RAM比磁性存儲（如硬盤驅動器和軟盤）或光學存儲（DVD，CD，藍光）快</span>。</span><span>這是因為RAM是固態設備，訪問時間沒有特別長。</span><span>RAM的運行速度為十億分之一秒（十億分之一秒），而硬盤驅動器和其他磁性介質的運行速度非常慢，為千分之一秒（十億分之一秒）。</span><span>RAM不足會導致計算機運行更慢。</span><span>因此，升級RAM是A +技術人員執行的最常見的升級之一。</span><span>RAM比磁性存儲（如硬盤驅動器和軟盤）或光學存儲（DVD，CD，藍光）快。</span><span>這是因為RAM是固態設備，訪問時間沒有特別長。</span><span>RAM的運行速度為十億分之一秒（十億分之一秒），而硬盤驅動器和其他磁性介質的運行速度非常慢，其運行速度為千分之一秒（毫秒）。</span><span>RAM不足會導致計算機運行更慢。</span><span>因此，升級RAM是A +技術人員執行的最常見的升級之一。</span><span>RAM的速度比磁存儲（如硬盤驅動器和軟盤）或光存儲（DVD，CD，藍光）要快。</span><span>這是因為RAM是固態設備，訪問時間沒有特別長。</span><span>RAM的運行速度為十億分之一秒（十億分之一秒），而硬盤驅動器和其他磁性介質的運行速度非常慢，為千分之一秒（十億分之一秒）。</span><span>RAM不足會導致計算機運行更慢。</span><span>因此，升級RAM是A +技術人員執行的最常見的升級之一。</span><span><span style="color: #ff0000;">RAM不足會導致計算機運行更慢</span>。</span><span>因此，升級RAM是A +技術人員執行的最常見的升級之一。</span><span>RAM不足會導致計算機運行更慢。</span><span>因此，升級RAM是A +技術人員執行的最常見的升級之一。</span></span></p>
<p style="text-align: center;"><span><span><img alt="" height="240" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image2.png" width="320"/></span></span></p>
<p><span style="background-color: #ccffff;">分類記憶</span></p>
<p id="N106A0" lang=""><span><span style="color: #ff0000; background-color: #ffff00;">RAM有多種分類</span>：<span style="color: #ff0000;">內存模塊類型，芯片類型，速度和奇偶校驗</span>。內存模塊因類型而異，具體取決於母板和母板的外形尺寸。內存模塊由其上的針腳數量定義，例如240針DIMM（雙列直插式內存模塊），184針DIMM等。</span></p>
<p id="N106A3" lang=""><span><span>RAM也<span style="color: #ff0000;">根據存儲芯片類型進行分類</span>。</span><span>過去系統根據製造商使用不同類型的芯片，但是當前的系統大多使用相同類型的芯片，<span style="color: #ff0000;">通常是DDR（雙數據速率），DDR2或DDR3</span>。</span><span>儘管DDR是最常見的類型，但某些獨特的系統可能會使用RDRAM（Rambus動態隨機存取存儲器）。</span></span></p>
<p id="N106A6" lang=""><span><span>另一個RAM分類基於速度。</span><span><span style="color: #ff0000;">較舊的內存以納秒（例如60納秒）分類</span>。</span><span>隨著時間的流逝，所有內存的速度幾乎相同，以納秒為單位，因此他們將其更改為總線速度（例如，PC-133內存以133 MHz的總線速度運行）。</span><span>現在，大多數<span style="color: #ff0000;">當代內存都是按吞吐量衡量的（PC2-6400，工作於800 MHz，但具有6.4 GBps的帶寬）</span>。</span></span></p>
<p id="N106A9" lang=""><span><span>最後，可以使用奇偶校驗，非奇偶校驗或ECC購買存儲器並按其分類。</span><span>奇偶校驗存儲器在將數據讀/寫到芯片時檢查錯誤。</span><span>儘管<span style="color: #ff0000;">奇偶校驗內存可以檢測到錯誤，但無法糾正錯誤</span>。</span><span>非奇偶校驗內存是台式計算機中最常見的類型之一，沒有錯誤檢查功能。</span><span>糾錯碼（ECC）是奇偶校驗的高級版本，可以發現錯誤並在從芯片讀取/寫入該錯誤時對其進行糾正。</span><span>由於這些附加功能，<span style="color: #ff0000;">ECC往往比等效的非奇偶校驗RAM慢</span>。</span></span></p>
<p lang="" style="text-align: center;"><span><span><img alt="隨機存取內存板。喬納森·科恩（Jonathan Cohen）根據CC-BY-NC許可使用的照片。" height="168" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image3.png" width="252"/></span></span></p>
<h3 style="text-align: left;">RAM歷史</h3>
<p><span style="background-color: #ccffff;">RAM歷史</span></p>
<p id="N10688" lang=""><span>在不同時間段內，通常使用不同類型的RAM。了解所有這些信息非常重要，因為許多公司使用的都是舊系統和最新系統。DRAM或動態RAM是最古老的類型之一。它需要經常刷新內容。<span style="color: #ff0000;">DRAM將數據或程序代碼的每一位存儲在由電容器和晶體管組成的存儲單元中</span>，並且通常<span style="color: #ff0000;">以矩形配置的存儲單元來組織</span>。DRAM存儲單元是動態的，因為它需要每幾毫秒刷新一次或給其提供新的電荷，以補償電容器的電荷洩漏。</span></p>
<p id="N1068B" lang=""><span><span><span style="color: #ff0000;">SRAM或靜態RAM解決了不斷刷新的問題</span>，但<span style="color: #ff0000;">製造成本很高</span>。</span><span>因此，SRAM僅<span style="color: #ff0000;">用於非常高速的需求</span>，例如1級，2級和3級CPU高速緩存，硬盤驅動器緩衝區和LCD屏幕緩衝區。</span></span></p>
<p id="N1068E" lang=""><span><span><span style="color: #ff0000;">SDRAM或同步DRAM是第一個以與主板總線相同的速度運行的內存</span>。</span><span>最初的芯片是168針雙列直插式內存模塊，其<span style="color: #ff0000;">速度額定為MHz</span>。</span><span>常見的命名約定包括PC-66（相當於66 Mhz），PC-133或PC-266。</span></span></p>
<p id="N10691" lang=""><span><span>儘管<span style="color: #ff0000;">SDRAM的運行速度與主板總線相同，但CPU的運行速度卻比主板總線快許多倍</span>。</span><span>DDR SDRAM代表雙倍數據速率同步動態隨機存取存儲器。</span><span>這種類型的存儲器可以在每個時鐘週期兩次傳輸數據，從而使速度比傳統SDRAM快一倍。</span><span>這些芯片有184引腳的型號，額定為MBps（吞吐量）。</span><span>一個很好的例子就是PC-1600，吞吐量為1600 MBps。</span></span></p>
<p id="N10694" lang=""><span style="color: #ff0000;">DDR2 SDRAM是雙倍數據速率SDRAM，具有更高的</span><span><span><span style="color: #ff0000;">延遲</span>，</span></span><span><span><span> </span>但<span style="color: #ff0000;">對外部總線的訪問速度更快</span>。</span><span>這些芯片具有240個引腳以將其模塊連接到插槽，並且還以MBps額定，例如PC2-4200，即4200 MBps（或4.2 GBps）。</span></span></p>
<p id="N1069F" lang=""><span><span><span style="color: #ff0000;">DDR3 SDRAM被稱為雙倍數據速率3 SDRAM</span>，是當<span style="color: #ff0000;">今使用的最新一代SDRAM。</span></span><span><span style="color: #ff0000;">它在較低的電壓下運行</span>，並且<span style="color: #ff0000;">比DDR2更快，但是與之前的DDR2模塊相比，延遲又增加</span>了。</span><span>這些模塊還具有240針，但是它們的“鍵控”與DDR2不同。</span><span>“鍵控”部分是引腳之間的間隙所在的位置，因此只有DDR2可以插入DDR2插槽，而<span style="color: #ff0000;">DDR3只能插入DDR3插槽</span>。</span><span>這些的常用符號是PC3-10600，其中10600是MBps的速度。</span></span></p>
<p id="N106A2" lang=""><span><span>Rambus直接RAM（RDRAM）也被稱為RIMM（Rambus嵌入式存儲模塊）。</span><span>這些模塊具有184針變體（16位版本）和232針變體（32位版本）。</span><span>主板上的每個空插槽都必須在其中放置一個連續性模塊（CRIMM），否則主板將無法正確識別內存。</span><span>在最近的系統中未使用此功能，但在Pentium 4系統中大量使用了此功能。</span><span>RDRAM以MBps為單位進行測量，例如RIMM 4200（或4200 MBps）。</span></span></p>
<p lang="" style="text-align: center;"><span><span><img alt="" height="199" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image4.jpg" width="265"/></span></span></p>
<h3 style="text-align: left;"><span><span>奇偶校驗</span></span></h3>
<p><span><span></span></span></p>
<p><span style="background-color: #ccffff;">內存模塊寬度</span></p>
<p id="N10696" lang=""><span>內存模塊的寬度由可傳輸的位數決定。內存最初以8位形式出現，但在當前系統中已增加到16位，32位和現在的64位。必須以存儲體的形式添加內存，以確保其寬度等於內存總線的寬度。例如，如果您需要64位，而單個模塊提供64位，則庫中將只有一個模塊。如前所述，雙通道內存需要兩倍的存儲量，因此存儲庫中需要兩個64位（128位）DIMM，而三通道則需要三個。</span></p>
<p lang="" style="text-align: center;"><span><img alt="" height="302" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image6.png" width="344"/></span></p>
<p><span style="background-color: #ccffff;">奇偶校驗和ECC</span></p>
<p id="N106A9" lang=""><span>奇偶校驗用於執行基本的錯誤檢查並確保內存內容可靠。此內存比非奇偶校驗慢，但增加了服務器和某些台式機工作站所需的可靠性。</span></p>
<p id="N106AC" lang=""><span><span>奇偶校驗是一種檢測內存錯誤的相當簡單的方法，沒有任何校正功能。</span><span>奇偶校驗在添加到傳輸數據字符串的單個數據位中表示。</span><span>如果模塊通常具有七個數據位，則將八分之一添加為奇偶校驗位。</span><span>如果模塊通常有八個芯片用於數據，則添加第九個芯片以實現奇偶校驗。</span></span></p>
<p id="N106AF" lang=""><span><span>每個字節都有一個與之關聯的奇偶校驗位。</span><span>在七位組成原始數據的情況下，總共傳輸了八位（七位原始數據位加一個奇偶校驗位）。</span><span>在八位組成原始數據的情況下，總共傳輸九位（八位數據位加一位奇偶校驗位）。</span><span>奇偶校驗位在寫入時設置，然後在讀取時進行計算和比較，以確定自存儲數據以來是否有任何位發生了更改。</span><span>這種類型的檢查僅限於檢測單個位錯誤。</span><span>如果更改了兩位，則奇偶校驗將“通過”，並且允許該錯誤可能破壞數據。</span></span></p>
<p id="N106B2" lang=""><span><span>奇偶校驗可以實現為“ 0”奇偶校驗或“ 1”奇偶校驗。</span><span>存儲字節時，將加零（如果選擇了“ 1”奇偶校驗，則為零）的數目。</span><span>結果存儲在奇偶校驗位中-如果為奇數，則為“ 1”；如果為偶數，則為“ 0”。</span><span>當從內存中讀取該字節時，將再次對這些位進行計數，並將結果與奇偶校驗位中存儲的結果進行比較。</span><span>匹配表示數據從存儲時起就沒有改變（或以結果相同的方式更改了兩位）。</span></span></p>
<p id="N106B5" lang=""><span><span>不管發送的原始數據位數如何，確定奇偶校驗位的過程都是相同的。</span><span>通常，原始數據有七位或八位。</span></span></p>
<p id="N106B8" lang=""><span><span>奇偶校驗位是通過對數據字符串中“ 1”位的數量進行計數來確定的。</span></span></p>
<p lang=""><span style="background-color: #ccffff;">範例(1)</span></p>
<p lang=""><span>使用偶校驗發送八位原始數據11110000。</span><span>要確定奇偶校驗位（數據的第9位），請計算數據字符串中“ 1”位的數量。</span><span>在這種情況下，有四個“ 1”位。</span><span>因為“ 1”位的總數是四，所以數據是偶數。</span><span>因此，奇偶校驗位設置為0。</span></p>
<p lang=""><span><img alt="" height="57" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image17.png" width="280"/></span></p>
<p lang=""><span style="background-color: #ccffff;">範例(2)</span></p>
<p id="N106FC" lang=""><span>使用奇偶校驗傳輸七位原始數據1000010。要確定奇偶校驗位（數據的第八位），請計算數據串中“ 1”位的數量。在這種情況下，有兩個“ 1”位。因此，將奇偶校驗位設置為1，因為數據中“ 1”位（兩個）的總數為偶數，這與傳輸的奇數奇偶校驗不匹配。由於“ 1”位的數量和奇偶校驗設置（奇數）不匹配，因此必須將奇偶校驗位設置為1。由於“ 1”位的總數為2，因此將奇偶校驗位“ 1”添加到該字符串將在整個八位字符串（七個數據位加一個奇偶校驗位）中產生奇數個“ 1”位（三個）。</span></p>
<p lang=""><span><img alt="" height="54" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image18.png" width="316"/></span></p>
<p lang=""><span><span>由於所有</span><span><span>錯誤</span></span><span><span>中</span><span>約有90％<span> </span></span><span>是單比特類型的，因此奇偶校驗通常在大多數情況下就足夠了。</span><span>不幸的是，由於要花一些額外的時鐘週期來計算，存儲和獲取奇偶校驗位，因此錯誤檢查要付出一定的代價，這會稍微降低性能。</span><span>另一個考慮因素是，由於無法通過奇偶校驗解決錯誤，因此實際上必須停止應用程序，並發出一條錯誤消息，指出遇到奇偶校驗錯誤。</span></span></span></p>
<p lang=""><span style="background-color: #ccffff;">範例(3)</span></p>
<p lang=""><span><span><span><span>使用偶校驗發送111100000。</span><span>要確定在傳輸過程中是否已更改了內存，請計算數據字符串中包括奇偶校驗位的“ 1”位數。</span><span>在這種情況下，有四個“ 1”位。</span><span>由於數據中的“ 1”位（四位）總數為偶數，與傳輸的偶數奇偶校驗相匹配，因此未更改任何存儲器。</span></span></span></span></p>
<p lang=""><span><span><span><span><img alt="" height="41" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image19.png" width="295"/></span></span></span></span></p>
<p lang=""><span style="background-color: #ccffff;">範例(4)</span></p>
<p lang=""><span><span><span><span><span>使用奇偶校驗發送10000100。</span><span>要確定在傳輸過程中是否已更改了內存，請計算數據字符串中包括奇偶校驗位的“ 1”位數。</span><span>在這種情況下，有兩個“ 1”位。</span><span>數據中“ 1”位的總數（兩個）是偶數，與傳輸的奇數奇偶校驗不匹配。</span><span>因此，內存已更改。</span></span></span></span></span></p>
<p lang=""><span><span><span><span><span><img alt="" height="42" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image20.png" width="293"/></span></span></span></span></span></p>
<h3><span><span><span><span><span>安裝內存模塊</span></span></span></span></span></h3>
<p><span style="background-color: #ccffff;">安裝內存模塊</span></p>
<p><span><span><span><span><span><span>安裝內存是計算機的常見升級，並且是很容易執行的任務。</span><span>內存模塊作為內存的“棒”（或模塊）安裝在主板上的“插槽”中。</span></span></span></span></span></span></p>
<p style="text-align: center;"><span><span><span><span><span><span><img alt="" height="247" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image8.png" width="371"/></span></span></span></span></span></span></p>
<p id="N10698" lang=""><span>安裝記憶棒的過程相當容易，但是必須謹慎且精確。要安裝記憶棒（或模塊）：</span></p>
<ol lang="">
<li lang=""><span><span>始終<span style="color: #ff0000;">確保採取適當的ESD（靜電釋放）保護措施</span>，以確保在安裝過程中不會損壞主板和內存模塊。</span></span></li>
<li lang=""><span><span>關閉計算機電源，然後拔下電源線。</span></span></li>
<li lang=""><span><span>打開外殼，開始安裝記憶棒。</span><span><span style="color: #ff0000;">將記憶棒放在芯片的側面，而不要緊握金觸點</span>。</span></span></li>
<li lang=""><span><span>將內存模塊的連接器與主板上的插槽對齊。</span></span></li>
<li lang=""><span><span>確認鎖定卡舌處於打開位置。</span></span></li>
<li lang=""><span><span>垂直向下推動模塊，直到卡舌旋轉到鎖定位置（需要用力）。</span></span></li>
</ol>
<p id="N106B0" lang=""><span style="background-color: #ff99cc;">重要說明：切勿觸摸模塊上的金色連接器！觸點可能會腐蝕，或者由於靜電放電會損壞模塊。</span></p>
<p id="N106B3" lang=""><span><span>要了解有關如何安裝RAM的更多信息，請訪問</span></span><a href="http://www.wikihow.com/Install-RAM" id="_i_2" lang="" target="_blank"><span><span>www.wikihow.com/Install-RAM</span></span></a><span><span>。</span></span></p>
<p lang=""><span><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/WzKUVZdIr10" width="560"></iframe></span></span></p>
<p><span><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bmRMRlDXph0" width="560"></iframe></span></span></p>
<h3>BIOS、CMOS簡介</h3>
<p><span style="background-color: #ccffff;">BIOS、CMOS簡介</span></p>
<p id="N10678" lang=""><span>打開計算機電源時，計算機的微處理器使用稱為</span><em class="bold" lang=""><span>BIOS</span></em><span>（基本輸入/輸出系統）的程序來啟動計算機系統。BIOS還管理計算機操作系統和已連接/已連接的設備（例如硬盤驅動器，視頻適配器，鍵盤，鼠標和打印機）之間的數據流。</span></p>
<p lang=""><span><img alt="" height="234" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image9.png" style="display: block; margin-left: auto; margin-right: auto;" width="312"/></span></p>
<p id="N1068E" lang=""><span style="color: #ff0000;">計算機的BIOS是最常見的<span class="term" lang="">固件</span></span><span>示例。<span style="color: #ff0000;">固件是芯片上的軟件</span>，是計算機啟動時計算機運行的第一個軟件。<span style="color: #ff0000; background-color: #ffff00;">BIOS具有多個功能</span>，包括<span style="color: #ff0000;">執行開機自檢，以測試和初始化處理器，視頻卡，磁盤驅動器和適配器。BIOS還包括計算機的低級“操作系統”</span>，它<span style="color: #ff0000;">使計算機可以從最基本的組件（包括鍵盤，鼠標和磁盤驅動器）獲取輸入並提供輸出。BIOS存儲在ROM（只讀存儲器）芯片</span>中，但可以<span style="color: #ff0000;">通過過程調用“刷新”進行升級</span>。</span></p>
<p id="N10694" lang=""><span><span>BIOS是<span style="color: #ff0000;">允許用戶更改設置的程序</span>，而設置本身則存儲在互補金屬氧化物半導體或<span> </span></span></span><span class="term" lang=""><span><span>CMOS中</span></span></span><span><span>。</span><span>CMOS是電池供電的存儲芯片。</span></span></p>
<p><span style="color: #000000; background-color: #ccffff;">認識BIOS、CMOS</span></p>
<p id="N106A1" lang=""><span><span style="color: #ff0000;">BIOS用於配置通用設置</span>，例如計算機讀取設備的順序。此命令稱為引導命令。此外，<span style="color: #ff0000;">BIOS還用於配置打開和關閉各種輸入/輸出端口的設置，以及各種CPU設置</span>（例如</span><span>虛擬化</span><span>和</span><span>超頻）的配置</span><span>。</span></p>
<p id="N106B6" lang=""><span style="background-color: #ff99cc;">更改BIOS時要非常小心。不正確的設置可能會使您的計算機無法啟動。</span></p>
<p lang="" style="text-align: center;"><span><span><img alt="" height="182" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image10.png" width="271"/></span></span></p>
<p id="N106C8" lang=""><span style="background-color: #ccffff;">BIOS配置以下設置：</span></p>
<ul lang="">
<li lang=""><span><span>引導順序</span></span></li>
<li lang=""><span><span>存儲設備（USB驅動器，硬盤驅動器，軟盤驅動器，光盤驅動器）</span></span></li>
<li lang=""><span><span>內置端口（SATA，eSATA，PATA，USB，IEEE-1394，串行，並行，PS / 2）</span></span></li>
<li lang=""><span><span>AGP，PCI，PCIe插槽</span></span></li>
<li lang=""><span><span>集成芯片組（音頻，視頻，網絡）</span></span></li>
<li lang=""><span><span>虛擬化</span></span></li>
<li lang=""><span><span>時鐘速度</span></span></li>
<li lang=""><span><span>記憶體（RAM）</span></span></li>
<li lang=""><span><span>能源管理</span></span></li>
<li lang=""><span><span>入侵檢測</span></span></li>
<li lang=""><span><span>密碼和加密</span></span></li>
<li lang=""><span><span>PC健康工具（溫度，電壓等）</span></span></li>
<li lang=""><span><span>直接訪問Web或其他服務，而無需啟動計算機（特定於UEFI）</span></span></li>
</ul>
<p id="N106F5" lang=""><span><span>在計算機上按下電源按鈕時，<span style="background-color: #ffffff; color: #ff0000;">引導過程的第一步是開機自檢，稱為</span></span></span><span class="term" lang="" style="background-color: #ffffff; color: #ff0000;">POST</span><span><span>。</span><span>成功進行POST後，BIOS將從CMOS中讀取設置，然後BIOS從已配置的引導設備中尋找操作系統。</span><span>找到操作系統後，操作系統的引導加載程序將開始操作系統引導過程，並將計算機的控制權移交給操作系統。</span></span></p>
<p><span style="color: #000000; background-color: #ccffff;">CMOS</span></p>
<p id="N10688" lang=""><span>CMOS（互補金屬氧化物半導體）<span style="color: #ff0000;">是電池供電的存儲芯片。它是非易失性存儲器</span>，用於<span style="color: #ff0000;">存儲BIOS設置</span>，並內置在主板中。只要<span style="color: #ff0000;">電池電量剩餘，就會向CMOS提供DC（直流電）並保留設置</span>。如果計算機不斷丟失設置，則需要更換電池。較舊的<span style="color: #ff0000;">CMOS電池型號使用DS12887A電池或AA尺寸的3.6伏Eternacell電池，通常可以使用大約三年</span>。較新的<span style="color: #ff0000;">CMOS型號包括內置鋰離子電池，該電池可使用長達10年</span>。當前使用的最典型的外部電池是CR2032，它類似於標準的手錶電池。當電池開始出現故障時，向用戶顯示的第一個信號是系統時鐘經常浪費時間。</span></p>
<p lang="" style="text-align: center;"><span><img alt="" height="186" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image12.png" width="270"/></span></p>
<h3 style="text-align: left;"><span>配置系統BIOS</span></h3>
<p><span style="background-color: #ccffff;">配置系統BIOS</span></p>
<p><span><span>要<span style="color: #ff0000;">更改CMOS中的設置，用戶需要進入BIOS</span>。</span><span>為此，用戶必須在計算機製造商設置的引導過程中按下有效的鍵或組合鍵。</span><span>用於<span style="color: #ff0000;">進入BIOS的最常用鍵是F2和/或Delete</span>。</span><span>通常，在引導過程中，進入BIOS所需的擊鍵將顯示在監視器上。</span><span>如果未顯示擊鍵，則快速搜索製造商的網站通常會告訴用戶輸入BIOS所需的擊鍵。</span></span></p>
<p id="N1068A" lang=""><span>BIOS界面和用於<span style="color: #ff0000;">進入BIOS的擊鍵取決於BIOS製造商</span>。請注意，儘管各類BIOS的可用信息是一致的，但界面略有不同。</span></p>
<p lang="" style="text-align: center;"><span><img alt="" height="213" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image13.png" width="257"/></span></p>
<p><span style="background-color: #ccffff;">統一可擴展固件接口(UEFI)</span></p>
<p><span>傳統上，只有一種類型的BIOS，它完全依賴於基於文本的目錄和用於輸入的鍵盤。最近，大<span style="color: #ff0000;">多數BIOS製造商已切換到統一的可擴展固件接口或</span></span><span class="term" lang="" style="color: #ff0000;">UEFI</span><span><span style="color: #ff0000;">。</span><span>此更新的<span style="background-color: #ffffff; color: #ff0000;">BIOS允許鍵盤和鼠標輸入</span>，並提供</span></span><span class="term" lang=""><span><span>GUI</span></span></span><span><span>而不是標準的基於文本的菜單。</span><span style="color: #ff0000;">支持GUID分區表（</span></span><span style="color: #ff0000;"><em lang="">GPT</em></span><span><span><span style="color: #ff0000;">），允許訪問最大2 TB的磁盤</span>，並向後兼容舊式分區結構（例如主引導記錄（</span></span><em lang=""><span><span>MBR</span></span></em><span><span>）和Linux的GRand統一引導加載程序（</span></span><em lang=""><span><span>GRUB）</span></span></em><span><span>）;<span> </span></span><span>從可移動媒體啟動；</span><span>用戶界面允許在線連接以進行Web訪問，診斷和文件管理；</span><span>和</span></span><em lang=""><span><span>安全啟動</span></span></em><span><span>，可防止操作系統前代碼被修改。</span><span>這些UEFI BIOS中的某些還包括允許用戶瀏覽Internet，玩基本遊戲和使用備份程序而無需進入正常操作系統的軟件。</span></span></p>
<p style="text-align: center;"><span><span><img alt="" height="172" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/efi-simple.png" width="226"/></span></span></p>
<p style="text-align: center;"><span><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/SlzwMKcCoMI" width="560"></iframe></span></span></p>
<p><span style="background-color: #ccffff;">自動配置BIOS、CMOS</span></p>
<p><span><span><span>自動配置是某些BIOS的功能。</span><span>儘管自動<span style="color: #ff0000;">BIOS配置並不總是會創建最佳設置</span>，但是如果<span style="color: #ff0000;">發生重大錯誤以將安全回滾創建到已知的良好狀態</span>，它可能會非常有用。</span><span>自動配置選項包括BIOS默認設置（原始/故障安全設置）和設置默認設置。</span><span>通常有一個turbo設置，可以快速配置以實現更快的系統。</span><span>在對系統進行故障排除時，BIOS的自動配置通常很有用。</span></span></span></p>
<p><span><span><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/SlzwMKcCoMI" width="560"></iframe></span></span></span></p>
<h3><span><span><span>開機自檢(POST)和錯誤報告</span></span></span></h3>
<p><span style="background-color: #ccffff;">開機自檢(POST)和錯誤報告</span></p>
<p id="N106A0" lang=""><span>接通電源後，POST（開機自檢）是計算機基本輸入/輸出系統（或“啟動程序”）運行以確定計算機鍵盤，隨機存取存儲器，磁盤驅動器的診斷測試序列。 ，並且其他硬件運行正常。POST是BIOS在引導時執行的初始測試。POST的作用是查找硬件錯誤，並報告這些錯誤。POST檢查以下內容：</span></p>
<ul lang="">
<li lang=""><span><span>CPU和部分BIOS</span></span></li>
<li lang=""><span><span>系統時間</span></span></li>
<li lang=""><span><span>視頻顯示卡</span></span></li>
<li lang=""><span><span>記憶</span></span></li>
<li lang=""><span><span>鍵盤</span></span></li>
<li lang=""><span><span>磁盤驅動器</span></span></li>
</ul>
<p id="N106B8" lang=""><span><span>如果檢測到必要的硬件並發現其運行正常，則計算機將開始啟動。</span><span>如果<span style="color: #ff0000;">未檢測到硬件或發現硬件運行不正常，BIOS將發出錯誤消息</span>。</span><span>根據問題的性質，此<span style="color: #ff0000;">錯誤消息可能是顯示屏上的文本和/或一系列編碼的嗶聲</span>。</span><span>由於POST在激活計算機的視頻卡之前運行，因此可能無法進入顯示屏幕。</span><span>嗶聲的模式可以是可變數目的短嗶聲，也可以是長短嗶聲的混合，具體取決於安裝的BIOS類型。</span><span>嗶聲的模式包含有關所檢測問題性質的消息。</span><span>例如，如果未檢測到鍵盤，則特定的嗶嗶聲將告知您該事實。</span></span></p>
<p id="N106BB" lang=""><span><span><span style="color: #ff0000;">嗶聲的模式類似於摩爾斯電碼</span>。</span><span>嗶聲的數量和順序由計算機製造商設定。</span><span>因此，每個嗶嗶聲的含義因製造商而異。</span><span>包含一些AMI和Dell嗶聲代碼的圖表如下所示。</span></span></p>
<p lang=""><span style="background-color: #ccffff;">蜂碼比較表</span></p>
<table height="152" style="width: 336.446px;">
<tbody>
<tr>
<td style="width: 61px;">
<p><span>嗶</span>聲代碼</p>
</td>
<td style="width: 119px;">錯誤</td>
<td style="width: 134.446px;">問題原因</td>
</tr>
<tr>
<td style="width: 61px;">1</td>
<td style="width: 119px;"><span>DRAM刷新失敗</span></td>
<td style="width: 134.446px;"><span>BIOS ROM損壞或故障</span></td>
</tr>
<tr>
<td style="width: 61px;">2</td>
<td style="width: 119px;"><span>奇偶校驗電路故障</span></td>
<td style="width: 134.446px;"><span>未檢測到RAM</span></td>
</tr>
<tr>
<td style="width: 61px;">3</td>
<td style="width: 119px;">
<table align="center" cellspacing="0" class="wbtable" lang="" style="width: 114.557px;">
<tbody>
<tr>
<td lang="" style="width: 109.557px;"><span>基本64K RAM故障</span></td>
</tr>
</tbody>
</table>
</td>
<td style="width: 134.446px;"><span>主板故障</span></td>
</tr>
<tr>
<td style="width: 61px;">4</td>
<td style="width: 119px;"><span>系統計時器故障</span></td>
<td style="width: 134.446px;">RAM故障</td>
</tr>
<tr>
<td style="width: 61px;">5</td>
<td style="width: 119px;"><span>工藝失敗</span></td>
<td style="width: 134.446px;"><span>CMOS電池故障</span></td>
</tr>
</tbody>
</table>
<h3 style="text-align: left;">BIOS更新</h3>
<p><span style="background-color: #ccffff;">BIOS更新</span></p>
<p><span>那麼如何更新BIOS？</span><span>記得BIOS是固件或芯片上的軟件。</span><span>出現電源管理問題或處理器升級時，BIOS需要更新。</span><span>始終檢查製造商的網站以獲取最新的固件版本。</span><span>在舊系統（1980年代至1990年代）中，實際的<span style="color: #ff0000;">BIOS芯片必須完全更換。</span></span><span><span style="color: #ff0000;">在較新的系統中，BIOS被“刷新”</span>。</span><span>刷新是一個特殊的過程，<span style="color: #ff0000;">其中的BIOS被覆蓋，除非絕對必要，否則不應該這樣做</span>。</span><span>始終確保在執行BIOS刷新之前備份信息；</span><span>如果<span style="color: #ff0000;">無法成功進行閃爍，則係統將無法恢復，甚至無法啟動</span>。</span></p>
<p style="text-align: center;"><span><img alt="" height="236" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image16.png" width="298"/></span></p>
<h1 style="text-align: center;"><span>homework(2)</span></h1>
<h2 style="text-align: center;"><span>homework(2-1)</span></h2>
<p style="text-align: center;"><span>一乙數列(kaggle)https://www.kaggle.com/giveme/cp2020-hw2</span></p>
<p style="text-align: center;"><span></span>按照上課的抄</p>
<p style="text-align: center;">呈現亂碼狀況</p>
<p style="text-align: center;"><span><img alt="" height="462" src="/images/p1.PNG" width="935"/></span></p>
<p style="text-align: center;"></p>
<p style="text-align: center;"></p>
<p style="text-align: center;"><span><img alt="" height="469" src="/images/p2.PNG" width="734"/></span></p>
<p style="text-align: center;"><span><img alt="" height="545" src="/images/p3.PNG" width="772"/><img alt="" height="582" src="/images/p4.PNG" width="822"/><img alt="" height="554" src="/images/p5.PNG" width="785"/></span></p>
<p style="text-align: center;"><span><img alt="" height="124" src="/images/p6.PNG" width="812"/></span></p>
<h1 style="text-align: left;"><span>homework(3)</span></h1>
<h2>PRACTICE PYTHON</h2>
<p>Character Input<span> </span><img class="chili" src="https://www.practicepython.org/assets/img/chili-liz-20x20.png"/></p>
<div><span style="background-color: #ccffff;"><i>input strings types int</i></span></div>
<p><span style="background-color: #cc99ff;">Calibrating</span> the exercises to the audience is going to be a<span style="background-color: #cc99ff;"> challenging</span> task, so I ask you to bear with me if the exercises are too easy or too hard. Every week there will be a poll you can click on to discuss whether the exercise is too easy or too hard and hopefully in a few weeks, I’ll get the level right. Let’s get to it! I will start with the exercise and include a discussion later, in case you want the extra challenge.</p>
<p><span><span style="background-color: #cc99ff;">校準</span>練習是一項<span style="background-color: #cc99ff;">艱難</span>的任務，因此，我請您忍受練習是否太容易或太難。</span><span>每週都會有一個小測驗，您可以練習以討論是太容易還是太難，希望在幾週後，我會把水平調到正確的水平。</span><span>讓我們開始吧！</span><span>如果您需要額外的挑戰，我將從練習開始，並在以後進行討論。</span></p>
<p><span style="background-color: #ccffff;">Exercise 1 (and <a href="https://www.practicepython.org/solution/2014/02/05/01-character-input-solutions.html" style="background-color: #ccffff;">Solution</a>)</span></p>
<p>Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old.</p>
<p>Extras:</p>
<ol>
<li>Add on to the previous program by asking the user for another number and printing out that many copies of the previous message. (<em>Hint:<span> </span><a href="http://www.mathsisfun.com/operation-order-pemdas.html">order of operations</a><span> </span>exists in Python</em>)</li>
<li>Print out that many copies of the previous message on separate lines. (<em>Hint: the string<span> </span><code class="highlighter-rouge">"\n</code><span> </span>is the same as pressing the ENTER button</em>)</li>
</ol>
<p><span>創建一個程序，要求用戶輸入他們的姓名和年齡。打印給他們的消息，告訴他們他們將滿100歲的年份。</span></p>
<p><span><span>附加功能：</span></span></p>
<ol>
<li><span><span>通過詢問用戶另一個號碼並打印出先前消息的許多副本來添加到先前的程序中。</span><span>（</span></span><em><span><span>提示：</span></span><a href="http://www.mathsisfun.com/operation-order-pemdas.html"><span><span>操作順序</span></span></a><span><span>在Python中存在</span></span></em><span><span>）</span></span></li>
<li><span><span>在單獨的行上打印出先前消息的許多副本。</span><span>（</span></span><em><span><span>提示：字符串</span></span><code class="highlighter-rouge">"\n</code><span><span>與按ENTER按鈕相同</span></span></em><span><span>）</span></span></li>
</ol>
<p>Discussion</p>
<p>Concepts for this week:</p>
<ul>
<li>Getting user input</li>
<li>Manipulating strings (a few ways)</li>
</ul>
<p>User input in Python</p>
<p>To get user input in Python (3), the command you use is<span> </span><a href="http://docs.python.org/3.3/library/functions.html?highlight=input#input"><code class="highlighter-rouge">input()</code></a>. Store the result in a variable, and use it to your heart’s content. Remember that the result you get from the user will be a string, even if they enter a number.</p>
<p><span>要在Python（3）中獲得用戶輸入，您使用的命令是</span><a href="http://docs.python.org/3.3/library/functions.html?highlight=input#input"><code class="highlighter-rouge">input()</code></a><span>。將結果存儲在變量中，並將其用於您的內心。請記住，即使用戶輸入數字，您從用戶那裡得到的結果也將是字符串。</span></p>
<p>For example,</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Give me your name: "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Your name is "</span> <span class="o">+</span> <span class="n">name</span><span class="p">)</span></code></pre>
</figure>
<p>What this will print in the terminal (or the shell, whatever you are running Python in) will be:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">Give</span> <span class="n">me</span> <span class="n">your</span> <span class="n">name</span><span class="p">:</span> <span class="n">Michele</span>
<span class="n">Your</span> <span class="n">name</span> <span class="ow">is</span> <span class="n">Michele</span></code></pre>
</figure>
<p>What happens at the end of<span> </span><code class="highlighter-rouge">input()</code><span> </span>is that it waits for the user to type something and press ENTER. Only after the user presses ENTER does the program continue.</p>
<p>Manipulating strings (a few ways)</p>
<p>What you get from the<span> </span><code class="highlighter-rouge">input()</code><span> </span>function is a string. What can you do with it?</p>
<p>First: Make the string into a number. Let’s say you are 100% positive that the user entered a number. You can turn the string into an integer with the function<span> </span><a href="http://docs.python.org/3.3/library/functions.html#int"><code class="highlighter-rouge">int()</code></a>. (In a later exercise or two or three there will be questions about what to do when the user does NOT enter a number and you try to do this; for now don’t worry about that problem). Here is what this looks like:</p>
<p><span>您從</span><code class="highlighter-rouge">input()</code><span>函數中得到的是一個字符串。你能做什麼呢？</span></p>
<p><span><span>第一：將字符串變成數字。</span><span>假設您100％肯定用戶輸入了數字。</span><span>您可以使用函數將字符串轉換為整數</span></span><a href="http://docs.python.org/3.3/library/functions.html#int"><code class="highlighter-rouge">int()</code></a><span><span>。</span><span>（在以後的一兩三個練習中，當用戶不輸入數字而您嘗試這樣做時，將會出現有關如何處理的問題；現在不必擔心該問題）。</span><span>看起來是這樣的：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter your age: "</span><span class="p">)</span>
<span class="n">age</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">age</span><span class="p">)</span></code></pre>
</figure>
<p>(or, if you want to be more compact with your code)</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Enter your age: "</span><span class="p">))<br/></span></code></pre>
</figure>
<p>In both cases,<span> </span><code class="highlighter-rouge">age</code><span> </span>will hold a variable that is an integer, and now you can do math with it.</p>
<p>(Note, you can also turn integers into strings exactly in the opposite way, using the<span> </span><a href="http://docs.python.org/3.3/library/functions.html#str"><code class="highlighter-rouge">str()</code></a><span> </span>function)</p>
<p>Second: Do math with strings. What do I mean by that? I mean, if I want to combine (<strong>concatenate</strong><span> </span>is the computer science word for this) strings, all I need to do is add them:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	
<span class="k">print</span><span class="p">(</span><span class="s">"Were"</span> <span class="o">+</span> <span class="s">"wolf"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Door"</span> <span class="o">+</span> <span class="s">"man"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"4"</span> <span class="o">+</span> <span class="s">"chan"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="s">"chan"</span><span class="p">)</span></code></pre>
</figure>
<p>The same works for multiplication:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="mi">4</span> <span class="o">*</span> <span class="s">"test"</span><span class="p">)</span></code></pre>
</figure>
<p>but division and subtraction do not work like this. In terms of multiplication, the idea of multiplyling two strings together is not well-defined. What does it mean to multiply two strings in the first place? However, it makes sense in a way to specify multiplying a string by a number - just repeat that string that number of times. Try this in your own program with all the arithmetic operations with numbers and strings - the best way to get a feel for what works and what doesn’t is to try it!</p>
<p><span>但是除法和減法不是這樣的。</span><span>就乘法而言，將兩個字符串相乘的想法尚不明確。</span><span>首先將兩個字符串相乘是什麼意思？</span><span>但是，以某種方式指定將字符串乘以數字是有意義的-只需將該字符串重複該次數即可。</span><span>在您自己的程序中嘗試使用帶有數字和字符串的所有算術運算-嘗試一下什麼有效和什麼無效的最佳方法是嘗試一下！</span></p>
<p><span></span></p>
<h2><span>Guess Letters <img class="chili" src="https://www.practicepython.org/assets/img/chili-liz-20x20.png"/><span><span> </span></span><img class="chili" src="https://www.practicepython.org/assets/img/chili-liz-20x20.png"/></span></h2>
<p><br/>Exercise 31 (and<span> </span><a href="https://www.practicepython.org/solution/2017/01/08/31-guess-letters-solutions.html">Solution</a>)</p>
<p><em>This exercise is Part 2 of 3 of the Hangman exercise series. The other exercises are:<span> </span><a href="https://www.practicepython.org/exercise/2016/09/24/30-pick-word.html">Part 1</a><span> </span>and<span> </span><a href="https://www.practicepython.org/exercise/2017/01/10/32-hangman.html">Part 3</a>.</em></p>
<p>Let’s continue building Hangman. In the game of Hangman, a clue word is given by the program(程序) that the player has to guess, letter by letter. The player guesses one letter at a time until the entire word has been guessed. (In the actual(實際) game, the player can only guess 6 letters incorrectly before losing).</p>
<p><span>讓我們繼續構建Hangman。</span><span>在《 Hangman》遊戲中，提示詞是由玩家逐字母猜測的程序給出的。</span><span>玩家一次猜一個字母，直到猜完整個單詞。</span><span>（在實際遊戲中，玩家只能輸錯6個字母）。</span></p>
<p>Let’s say the word the player has to guess is “EVAPORATE”. For this exercise, write the logic that asks a player to guess a letter and displays letters in the clue word that were guessed correctly. For now, let the player guess an infinite(無窮) number of times until they get the entire word. As a bonus, keep track(跟踪) of the letters the player guessed and display a different message if the player tries to guess that letter again. Remember to stop the game when all the letters have been guessed correctly! Don’t worry about choosing a word randomly or keeping track of the number of guesses the player has remaining - we will deal with those in a future exercise.</p>
<p><span>假設玩家必須猜出的單詞是“ EVAPORATE”。</span><span>在本練習中，編寫要求玩家猜出字母並在提示詞中顯示正確猜出的字母的邏輯。</span><span>現在，讓玩家猜無限次，直到獲得完整的單詞為止。</span><span>作為獎勵，跟踪玩家猜出的字母，如果玩家嘗試再次猜出該字母，則顯示不同的消息。</span><span>記住正確猜出所有字母后，停止遊戲！</span><span>不必擔心隨機選擇一個單詞或跟踪玩家剩餘的猜測數-我們將在以後的練習中處理這些猜測。</span></p>
<p>An example interaction can look like this:</p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">&gt;&gt;&gt; Welcome to Hangman!
_ _ _ _ _ _ _ _ _
&gt;&gt;&gt; Guess your letter: S
Incorrect!
&gt;&gt;&gt; Guess your letter: E
E _ _ _ _ _ _ _ E
...</code></pre>
</figure>
<p>And so on, until the player gets the word.</p>
<p><img alt="" height="755" src="/images/uhijh.PNG" width="1905"/></p>
<p><br/>Birthday Json<span> </span><img class="chili" src="https://www.practicepython.org/assets/img/chili-liz-20x20.png"/><span> </span><img class="chili" src="https://www.practicepython.org/assets/img/chili-liz-20x20.png"/></p>
<div><i></i></div>
<p>Exercise 34 (and<span> </span><a href="https://www.practicepython.org/solution/2017/02/25/34-birthday-json-solutions.html">Solution</a>)</p>
<p><em>This exercise is Part 2 of 4 of the birthday data exercise series. The other exercises are:<span> </span><a href="https://www.practicepython.org/exercise/2017/01/24/33-birthday-dictionaries.html">Part 1</a>,<span> </span><a href="https://www.practicepython.org/exercise/2017/02/28/35-birthday-months.html">Part 3</a>, and<span> </span><a href="https://www.practicepython.org/exercise/2017/04/02/36-birthday-plots.html">Part 4</a>.</em></p>
<p>In the<span> </span><a href="https://www.practicepython.org/exercise/2017/01/24/33-birthday-dictionaries.html">previous exercise</a><span> </span>we created a dictionary of famous scientists’ birthdays. In this exercise, modify your program from<span> </span><a href="https://www.practicepython.org/exercise/2017/01/24/33-birthday-dictionaries.html">Part 1</a><span> </span>to load the birthday dictionary from a JSON file on disk, rather than having the dictionary defined in the program.</p>
<p><strong>Bonus</strong>: Ask the user for another scientist’s name and birthday to add to the dictionary, and update the JSON file you have on disk with the scientist’s name. If you run the program multiple times and keep adding new names, your JSON file should keep getting bigger and bigger.</p>
<p><span>在上</span><a href="https://www.practicepython.org/exercise/2017/01/24/33-birthday-dictionaries.html"><span>一個練習中，</span></a><span>我們創建了著名科學家生日字典。在本練習中，請修改</span><a href="https://www.practicepython.org/exercise/2017/01/24/33-birthday-dictionaries.html"><span>第1部分中</span></a><span>的程序，以從磁盤上的JSON文件加載生日字典，而不是在程序中定義字典。</span></p>
<p><strong><span><span>獎勵</span></span></strong><span><span>：向用戶詢問另一個科學家的名字和生日，以添加到詞典中，並使用科學家的名字更新磁盤上的JSON文件。</span><span>如果您多次運行該程序並繼續添加新名稱，那麼JSON文件應該會越來越大。</span></span></p>
<p>Discussion</p>
<p>In a previous exercise we talked about<span> </span><a href="https://www.practicepython.org/exercise/2014/11/30/21-write-to-a-file.html">how to save information to a .txt file on disk</a>, but in this exercise we are talking about writing a different kind of file format called JSON.</p>
<p>The JSON file format was developed in the early 2000s as a standard for how web servers would pass data back and forth. It is still used for web server communication today, and it conveniently is also a way we can store dictionary-like data in a file on disk. The JSON format specifies a way to<span> </span><em>serialize</em><span> </span>(turn into a string) a dictionary or list, which then means that string can be written to disk or passed to another application. JSON is meant to store dictionary-like data both in a readable way for humans, and in a compact way that can be read by computers. Because it is a standard format, you can write JSON in one language and read JSON from another language to effectively pass information between the two programs or applications. You can read more about the history of JSON on<span> </span><a href="https://en.wikipedia.org/wiki/JSON">the wikipedia article</a>.</p>
<p><span>在上一個練習中，我們討論瞭</span><a href="https://www.practicepython.org/exercise/2014/11/30/21-write-to-a-file.html"><span>如何將信息保存到磁盤上的.txt文件中</span></a><span>，但是在本練習中，我們正在討論編寫另一種稱為JSON的文件格式。</span></p>
<p><span><span>JSON文件格式是在2000年代初期開發的，它是Web服務器如何來回傳遞數據的標準。</span><span>如今，它仍然用於Web服務器通信，並且它也是我們可以將類似字典的數據存儲在磁盤上的文件中的一種便捷方式。</span><span>JSON格式指定了一種對</span><span>字典或列表</span><span>進行</span></span><em><span><span>序列化</span></span></em><span><span>（轉換為字符串）的方式，這意味著可以將字符串寫入磁盤或傳遞給另一個應用程序。</span><span>JSON旨在以人類可讀的方式以及計算機可以讀取的緊湊方式存儲類似字典的數據。</span><span>因為它是一種標準格式，所以您可以用一種語言編寫JSON並從另一種語言讀取JSON，以在兩個程序或應用程序之間有效地傳遞信息。</span><span>您可以在上閱讀有關JSON歷史的更多信息</span></span><a href="https://en.wikipedia.org/wiki/JSON"><span><span>維基百科文章</span></span></a><span><span>。</span></span></p>
<p>Here is an example of JSON:</p>
<figure class="highlight">
<pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="nt">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Michele"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"shirt_color"</span><span class="p">:</span><span class="w"> </span><span class="s2">"blue"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"laptops"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nt">"brand"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Lenovo"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"operating_system"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ubuntu"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nt">"brand"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Apple"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"operating_system"</span><span class="p">:</span><span class="w"> </span><span class="s2">"OSX"</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nt">"has_a_dog"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nt">"items_on_desk"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"mug"</span><span class="p">,</span><span class="w"> </span><span class="s2">"pen"</span><span class="p">,</span><span class="w"> </span><span class="s2">"monitor"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span></code></pre>
</figure>
<p>Notice how you can mix dictionaries and lists. In this example the top-level container is a dictionary, with the keys<span> </span><code class="highlighter-rouge">name</code>,<span> </span><code class="highlighter-rouge">shirt_color</code>,<span> </span><code class="highlighter-rouge">laptops</code>,<span> </span><code class="highlighter-rouge">has_a_dog</code>, and<span> </span><code class="highlighter-rouge">items_on_desk</code>. The keys can be lists, strings, booleans, or other dictionaries. Usually you don’t write JSON by hand (but it is very readable so you easily could). One of my favorite tools to test whether you’ve written valid JSON is this free<span> </span><a href="http://jsonlint.com/">JSON validator</a><span> </span>- just paste your JSON in there and it tells you if it will be read by a program that understands JSON.</p>
<p>There is a built-in Python library for reading and writing JSON files, so you don’t have to worry about how your dictionaries and lists are going to be turned into the right format!</p>
<p>As long as the data you want to store is either a dictionary or a list of dictionaries, writing JSON is straightforward. First, import the<span> </span><a href="https://docs.python.org/3/library/json.html"><code class="highlighter-rouge">json</code><span> </span>library</a><span> </span>(no installation needed, it is built in to Python) and initialize some dictionary:</p>
<p><span>注意如何混合使用字典和列表。在這個例子中頂層容器是一個字典，與鍵</span><code class="highlighter-rouge">name</code><span>，</span><code class="highlighter-rouge">shirt_color</code><span>，</span><code class="highlighter-rouge">laptops</code><span>，</span><code class="highlighter-rouge">has_a_dog</code><span>，和</span><code class="highlighter-rouge">items_on_desk</code><span>。鍵可以是列表，字符串，布爾值或其他字典。通常，您不需要手工編寫JSON（但它具有很高的可讀性，因此您可以輕鬆編寫）。這個免費的</span><a href="http://jsonlint.com/"><span>JSON驗證程序</span></a><span>是我最喜歡的測試您是否已編寫有效JSON的<a href="http://jsonlint.com/">工具之一</a>-只需將JSON粘貼在其中，它就會告訴您是否會由理解JSON的程序讀取。</span></p>
<p><span><span>有一個內置的Python庫用於讀寫JSON文件，因此您不必擔心字典和列表將如何轉換為正確的格式！</span></span></p>
<p><span><span>只要您要存儲的數據是字典還是詞典列表，編寫JSON就很簡單。</span><span>首先，導入</span></span><a href="https://docs.python.org/3/library/json.html"><code class="highlighter-rouge">json</code><span><span>庫</span></span></a><span><span>（無需安裝，它內置在Python中）並初始化一些字典：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>

<span class="n">info_about_me</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"name"</span><span class="p">:</span> <span class="s">"Michele"</span><span class="p">,</span>
    <span class="s">"has_a_dog"</span><span class="p">:</span> <span class="bp">False</span>
<span class="p">}</span></code></pre>
</figure>
<p>Then, to save your dictionary to disk you need to open a file and use the<span> </span><code class="highlighter-rouge">json.dump()</code><span> </span>method. Remember to use the<span> </span><code class="highlighter-rouge">w</code><span> </span>flag when opening a file for writing:</p>
<p><span>然後，要將字典保存到磁盤，您需要打開一個文件並使用該</span><code class="highlighter-rouge">json.dump()</code><span><span>方法。</span></span><code class="highlighter-rouge">w</code><span><span>打開文件進行寫入時，</span><span>請記住使用該</span><span>標誌：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"info.json"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">info_about_me</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span></code></pre>
</figure>
<p>And you will have saved a file called<span> </span><code class="highlighter-rouge">info.json</code><span> </span>in the same directory as your Python program. The dictionary<span> </span><code class="highlighter-rouge">info_about_me</code><span> </span>will be saved to disk, but the variable name will not be. Basically, JSON won’t remember the name of the variable you saved your dictionary in. If you open the file with a text editor (Notepad++, vim, emacs, Sublime Text, etc.), you will just see:</p>
<p><span>您將</span><code class="highlighter-rouge">info.json</code><span><span>在與Python程序相同的目錄中</span><span>保存一個名為的文件</span><span>。</span><span>詞典</span></span><code class="highlighter-rouge">info_about_me</code><span><span>將保存到磁盤，但變量名不會。</span><span>基本上，JSON不會記住保存字典的變量的名稱。如果使用文本編輯器（Notepad ++，vim，emacs，Sublime Text等）打開文件，則只會看到：</span></span></p>
<figure class="highlight">
<pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="nt">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Michele"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"has_a_dog"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="p">}</span></code></pre>
</figure>
<p>Alternatively, you can also manually create a JSON file and type JSON directly into it (passing it through<span> </span><a href="http://jsonlint.com/">the JSON validator</a><span> </span>of course!). Just save the file with the<span> </span><code class="highlighter-rouge">.json</code><span> </span>extension and copy the dictionary directly into the file.</p>
<p>Now I can use the information about me that I saved to disk in another program (written in a completely different file) to do something like printing a message. When I saved the JSON file, the variable name of my dictionary was not saved with it, so when I load the JSON file I need to save it into a variable. I can use the same<span> </span><code class="highlighter-rouge">json</code><span> </span>library to do this:</p>
<p><span>另外，您也可以手動創建一個JSON文件，然後直接在其中鍵入JSON（當然，還要通過</span><a href="http://jsonlint.com/"><span>JSON驗證器</span></a><span>！）。只需保存帶有</span><code class="highlighter-rouge">.json</code><span>擴展名的文件，然後將字典直接複製到文件中即可。</span></p>
<p><span><span>現在，我可以使用保存在另一個程序中的有關我的信息（以完全不同的文件編寫）來執行類似打印消息的操作。</span><span>當我保存JSON文件時，字典的變量名並未隨之保存，因此，當我加載JSON文件時，需要將其保存到變量中。</span><span>我可以使用相同的</span></span><code class="highlighter-rouge">json</code><span><span>庫來執行此操作：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"info.json"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">info</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>

<span class="k">if</span> <span class="n">info</span><span class="p">[</span><span class="s">"has_a_dog"</span><span class="p">]:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"{} has a dog"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">"name"</span><span class="p">]))</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"{} does not have a dog"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">"name"</span><span class="p">]))</span></code></pre>
</figure>
<p>When this program runs, the output should be:</p>
<p><span>運行該程序時，輸出應為：</span></p>
<figure class="highlight">
<pre><code class="language-text" data-lang="text">Michele does not have a dog</code></pre>
</figure>
<p>Notice how when I loaded the JSON file I used a different name than when I saved it - this is because the variable names don’t get saved together with the JSON data, so you do not have to use the same variable names to save and load JSON.</p>
<p>Now that you know about JSON, you can use it to do a number of things:</p>
<ul>
<li>Save data to disk that can be shared by people and programs.</li>
<li>Constantly update data that needs to be shared by re-saving and re-load to disk.</li>
<li>Save data from a program that a human can read and manually check and fix errors.</li>
</ul>
<p><span>請注意，加載JSON文件時使用的名稱與保存時使用的名稱不同-這是因為變量名稱不會與JSON數據一起保存，因此您不必使用相同的變量名稱進行保存和加載JSON。</span></p>
<p><span><span>現在，您已經了解了JSON，可以使用它來做很多事情：</span></span></p>
<ul>
<li><span><span>將數據保存到可以由人員和程序共享的磁盤。</span></span></li>
<li><span><span>不斷更新需要通過重新保存並重新加載到磁盤的數據。</span></span></li>
<li><span><span>保存人類可以讀取的程序中的數據，並手動檢查和修復錯誤。</span></span></li>
</ul>
<p><img alt="" height="789" src="/images/fdsfd.PNG" width="1915"/></p>
<h1 style="text-align: center;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">開發</span></span></h1>
<p style="text-align: center;"><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p style="text-align: center;">cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p style="text-align: center;">init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<p></p>