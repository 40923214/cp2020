<h1>First</h1>
<p id="N10686" lang=""><span>在本課程中，我們將介紹主板的用途和功能。我們還將介紹<strong><span style="color: #ff0000;">中央處理器（CPU）</span></strong>和<strong><span style="color: #ff0000;">為CPU提供專門功能的各種技術</span></strong>，例如虛擬化，超線程和多核處理器。最後，我們將<strong><span style="color: #ff0000;">介紹可用的各種CPU冷卻方法</span></strong>，例如主動和被動散熱器以及液體冷卻。</span></p>
<p id="N10689" lang=""><span><span>主板是計算機的基礎。</span><span>主板就像一個街區，公交車就像街道。</span><span>這些組件就像城市中的建築物，因此，如果您要從一棟建築物轉到另一棟建築物（或者在我們的情況下，如果我們希望信息從一個組件流向另一組件），則它必須穿越公交車（街道） ）。</span><span><strong><span style="color: #ff0000;">總線將主板的各個組件物理連接在一起</span><span style="color: #ff0000;">，使信息可以流入和流出各個計算機組件</span></strong>。</span><span>主板有各種形狀，大小和佈局。</span><span>主板的特定形狀，大小和佈局稱為其外形尺寸。</span><span>主板是最重要的計算機組件之一，因為其他所有組件都插入主板中，</span><span>可以插入專用插槽（例如CPU），擴展槽（用於各種擴展卡）或連接器（例如SATA存儲設備和音頻輸入/輸出）中。</span><span>主板確實是計算機中所有組件的主要集合點</span></span></p>
<p>                                               <img alt="主板的照片。" height="153" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image1.png" width="187"/></p>
<p style="text-align: center;"> <img height="458" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image2.jpeg" width="543"/></p>
<table style="width: 641px;">
<tbody>
<tr style="height: 18px;">
<td style="width: 119.857px; height: 18px;">
<table align="center" cellspacing="0" class="wbtable" lang="" style="width: 94.8571px;">
<tbody>
<tr class="e" style="height: 14.7857px;">
<td lang="" style="width: 88.8571px; height: 14.7857px;"><strong>組件名稱</strong></td>
</tr>
</tbody>
</table>
</td>
<td style="width: 429.143px; height: 18px;">
<table align="center" cellspacing="0" class="wbtable" height="19" lang="" width="533">
<tbody>
<tr class="e">
<td lang="" style="text-align: left; width: 527.429px;"><strong>功能</strong></td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr style="height: 14px;">
<td style="width: 119.857px; height: 14px;"><span>PCI擴充插槽</span></td>
<td style="width: 429.143px; height: 14px;"></td>
</tr>
<tr style="height: 43px;">
<td style="width: 119.857px; height: 43px;"><span>PCIe x1（PCI Express大小1）插槽</span></td>
<td style="width: 429.143px; height: 43px;"></td>
</tr>
<tr style="height: 43px;">
<td style="width: 119.857px; height: 43px;"><span>PCIe x16（PCI Express尺寸16）插槽</span></td>
<td style="width: 429.143px; height: 43px;"></td>
</tr>
<tr style="height: 14px;">
<td style="width: 119.857px; height: 14px;"><span>後置輸入/輸出集群</span></td>
<td style="width: 429.143px; height: 14px;"></td>
</tr>
<tr style="height: 14px;">
<td style="width: 119.857px; height: 14px;"><span>CPU插槽</span></td>
<td style="width: 429.143px; height: 14px;"></td>
</tr>
<tr style="height: 14px;">
<td style="width: 119.857px; height: 14px;"><span>內存插槽</span></td>
<td style="width: 429.143px; height: 14px;"></td>
</tr>
<tr style="height: 14px;">
<td style="width: 119.857px; height: 14px;"><span>24針主電源連接器</span></td>
<td style="width: 429.143px; height: 14px;"></td>
</tr>
<tr style="height: 12px;">
<td style="width: 119.857px; height: 12px;"></td>
<td style="width: 429.143px; height: 12px;"></td>
</tr>
</tbody>
</table>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>